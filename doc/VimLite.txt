*VimLite.txt*              An IDE inspired by CodeLite

                   _   _______ _   _____   _________________~
                  | | / /_  _// | /, / /  /_  _/_  __/ ____/~
                  | |/ / / / / ,|// / /    / /  / / / __/   ~
                  | / /_/ /_/ /|_/ / /____/ /_ / / / /___   ~
                  |__/_____/_/  /_/_____/____//_/ /_____/   ~

                            VimLite User Manual
==============================================================================
CONTENTS                                *VimLite-Contents*

1. Introduction                         |VimLite-Introduction|
2. Download                             |VimLite-Download|
3. Prerequisites                        |VimLite-Prerequisites|
4. Project Manager                      |VimLite-ProjectManager|
    4.1. KeyMappings                    |VimLite-ProjectManager-KeyMappings|
    4.2. Commands                       |VimLite-ProjectManager-Commands|
    4.3. Cscope                         |VimLite-ProjectManager-Cscope|
5. Code Completion                      |VimLite-CodeCompletion|
    5.1. OmniCpp                        |VimLite-CodeCompletion-OmniCpp|
        5.1.1. Commands                 |VimLite-CodeCompletion-OmniCpp-Cmds|
        5.1.2. Macros Handling          |VimLite-CodeCompletion-OmniCpp-Macros|
        5.1.3. Limitation               |VimLite-CodeCompletion-OmniCpp-Limit|
    5.2. Clang                          |VimLite-CodeCompletion-Clang|
6. Debugger                             |VimLite-Debugger|
7. Options                              |VimLite-Options|
    7.1. Project Manager Options        |VimLite-Options-ProjectManager|
    7.2. Calltips Options               |VimLite-Options-Calltips|
    7.3. OmniCpp Options                |VimLite-Options-OmniCpp|
    7.4. Clang Options                  |VimLite-Options-Clang|
    7.5. Debugger Options               |VimLite-Options-Debugger|
8. Tips                                 |VimLite-Tips|
    8.1. Configuration Sample           |VimLite-ConfigSample|
    8.2. Use cl.exe On Windows          |VimLite-Windows|

==============================================================================
1. Introduction                         *VimLite-Introduction*

VimLite is a C/C++ IDE.

VimLite consists mainly of the following three modules:

    * Project Manager:                  The project manager module is 
                                        compatible with CodeLite. It auto
                                        generates makefile for you.

    * Code Completion:                  An enhanced OmniCpp plugin and a clang 
                                        code completion plugin.

                                        OmniCpp support the following 
                                        completion: namespace, structure, 
                                        class member, using, using namespace, 
                                        class template, stl, etc.

                                        Clang code completion supports all but 
                                        is slower than OmniCpp.

    * Debugger Integration:             Gdb integration, by pyclewn. 

==============================================================================
2. Download                             *VimLite-Download*

The latest release of VimLite can be found from this url:

    http://www.vim.org/scripts/script.php?script_id=3647

And VimLite in google code can be found from this url:

    http://code.google.com/p/vimlite/

==============================================================================
3. Prerequisites                        *VimLite-Prerequisites*

VimLite depends following software: >
    python
    python-lxml (optional)
    make
    cscope
    gcc
    gdb
<
On ubuntu 10.04, just run: >
    sudo apt-get install python python-lxml build-essential gdb cscope
<
Make sure your vim compile with this features: >
    +python
    +netbeans_intg
<
And make sure you have these settings in your vimrc file: >
    set nocp
    filetype plugin on
    syntax on
<
==============================================================================
4. Project Manager                      *VimLite-ProjectManager*

Workspaces and Projects~

One workspace holds a number of projects, for instance, various pieces of a
large design. Create a workspace by selecting "New Workspace..." on workspace
popup menu (The popup menu when the cursor in workspace line).

A project is one piece of a large design within that workspace. Create a
project by selecting 'Create a New Project' on workspace popup menu. Please
create a worksapce before do this.

For instance, one project might be a DLL, another project could be a static
library, and yet another project could be a GUI design which would be
eventually integrated together in one workspace to be released as a piece of
software. All these projects could be part of one workspace.

The project itself contains all information it needs to produce its own output
piece of the overall software.

Also, a project contains no information about the workspace, and thus one
project can be part of multiple workspaces. The workspace holds pointers to
the projects which are members of that workspace.

The workspace information file is <workspace-name>.workspace.

The project information file is <project-name>.project.

Configurations~

Each project has at least two build configurations: Debug and Release. In
practice you can have many more configurations. You can select what
configuration the project is using by selecting 'Settings' on project popup
menu.

This information is global among all the projects in the workspace and so is
kept in the workspace information file. This means all projects be in the same
configuration in a workspace.


NOTE: Almost all commands are listed in popup menu, please help info around.

------------------------------------------------------------------------------
4.1. KeyMappings                        *VimLite-ProjectManager-KeyMappings*

Press <F1> in workspace buffer for quick help information.

    Key             Description                     Option~
------------------------------------------------------------------------------
    <2-LeftMouse>   Fold / expand node          
    <CR>            Same as <2-LeftMouse>
    o               Same as <2-LeftMouse>           |g:VLWOpenNodeKey|
    go              Preview file                    |g:VLWOpenNode2Key|
    t               Open file in new tab            |g:VLWOpenNodeInNewTabKey|
    T               Open file in new tab silently   |g:VLWOpenNodeInNewTab2Key|
    i               Open file split                 |g:VLWOpenNodeSplitKey|
    gi              Preview file split              |g:VLWOpenNodeSplit2Key|
    s               Open file vsplit                |g:VLWOpenNodeVSplitKey|
    gs              Preview file vsplit             |g:VLWOpenNodeVSplit2Key|
    P               Go to root node                 |g:VLWGotoRootKey|
    p               Go to parent node               |g:VLWGotoParentKey|
    <C-n>           Go to next sibling node         |g:VLWGotoPrevSibling|
    <C-p>           Go to prev sibling node         |g:VLWGotoNextSibling|
    .               Show text menu                  |g:VLWShowMenuKey|
    ,               Popup gui menu                  |g:VLWPopupMenuKey|
    R               Refresh buffer                  |g:VLWRefreshBufferKey|
    <F1>            Toggle quick help info          |g:VLWToggleHelpInfo|
------------------------------------------------------------------------------
                                        *g:VLWOpenNodeKey*
If workspace node is selected, a build config menu will be shown. >
    let g:VLWOpenNodeKey = 'o'
<
                                        *g:VLWOpenNode2Key*
>
    let g:VLWOpenNode2Key = 'go'
<
                                        *g:VLWOpenNodeInNewTabKey*
>
    let g:VLWOpenNodeInNewTabKey = 't'
<
                                        *g:VLWOpenNodeInNewTab2Key*
>
    let g:VLWOpenNodeInNewTab2Key = 'T'
<
                                        *g:VLWOpenNodeSplitKey*
>
    let g:VLWOpenNodeSplitKey = 'i'
<
                                        *g:VLWOpenNodeSplit2Key*
>
    let g:VLWOpenNodeSplit2Key = 'gi'
<
                                        *g:VLWOpenNodeVSplitKey*
>
    let g:VLWOpenNodeVSplitKey = 's'
<
                                        *g:VLWOpenNodeVSplit2Key*
>
    let g:VLWOpenNodeVSplit2Key = 'gs'
<
                                        *g:VLWGotoParentKey*
>
    let g:VLWGotoParentKey = 'p'
<
                                        *g:VLWGotoRootKey*
>
    let g:VLWGotoRootKey = 'P'
<
                                        *g:VLWGotoNextSibling*
>
    let g:VLWGotoNextSibling = '<C-n>'
<
                                        *g:VLWGotoPrevSibling*
>
    let g:VLWGotoPrevSibling = '<C-p>'
<
                                        *g:VLWRefreshBufferKey*
>
    let g:VLWRefreshBufferKey = 'R'
<
                                        *g:VLWShowMenuKey*
The key to popup general menu. >
    let g:VLWShowMenuKey = '.'
<
                                        *g:VLWPopupMenuKey*
The key to popup gui menu, often it is set '<RightRelease>' if you like to use
mouse. >
    let g:VLWPopupMenuKey = ','
<
                                        *g:VLWToggleHelpInfo*
>
    let g:VLWToggleHelpInfo = '<F1>'

------------------------------------------------------------------------------
4.2. Commands                           *VimLite-ProjectManager-Commands*

    VLWorkspaceOpen [workspace_file]    Open a workspace file or default
                                        workspace.

    VLWBuildActiveProject               Build active projcet.

    VLWCleanActiveProject               Clean active project.

    VLWRunActiveProject                 Run active project.

    VLWBuildAndRunActiveProject         Build active project and run if build
                                        successfully.

    VLWSwapSourceHeader                 Toggle editing source and header

    VLWFindFiles [name]                 Find workspace files

    VLWFindFilesNoCase [name]           Find workspace files with no case
                                        sensitive

    VLWOpenIncludeFile                  Open included file when locates the
                                        cursor in '#include' line.

------------------------------------------------------------------------------
4.3. Cscope                             *VimLite-ProjectManager-Cscope*

VimLite uses cscope database to achieve some features, such as jump to
definition, jump to declaration, search workspace files, etc.
Run ':h cscope' for more info.

Commands:~

    VLWInitCscopeDatabase [1]           Initialize cscope database. If
                                        argument is not 0, VimLite will
                                        generate database forcibly.

    VLWUpdateCscopeDatabase             Update database. Only be valided when
                                        has been connected to the workspace
                                        cscope database.


==============================================================================
5. Code Completion                      *VimLite-CodeCompletion*

Popup menu format: ~
>
    +------------------------+
    |method1()  f  +  MyClass|
    |_member1   m  +  MyClass|
    |_member2   m  #  MyClass|
    |_member3   m  -  MyClass|
    +------------------------+
        ^       ^  ^     ^
       (1)     (2)(3)   (4)
<
(1) Name of the symbol, when a match ends with '()' it's a function.

(2) Kind of the symbol, possible kinds are: >
    * c = classes
    * d = macro definitions
    * e = enumerators (values inside an enumeration)
    * f = function definitions
    * g = enumeration names
    * m = class, struct, and union members
    * n = namespaces
    * p = function prototypes
    * s = structure names
    * t = typedefs
    * u = union names
    * v = variable definitions
    * x = using types

(3) Access, possible values are: >
    * + = public
    * # = protected
    * - = private
Note: Enumerators have no access information

(4) Parent scope where the symbol is defined.
Note: If the parent scope is '<global>' it's a global symbol.
Note: Anonymous scope may starts with "__anon".


Global Scope Completion~

The global scope completion allows you to complete global symbols for the base 
you are currently typing. The base can start with '::' or not.
Note: Global scope completion only works with a non empty base, if you run a
completion just after a '::' the completion will fail. The reason is that if
there is no base to complete the script will try to display all the tags in
the database. For small project it could be not a problem but for others you
may wait 5 minutes or more for a result.

eg1: >
    pthread_cr<C-x><C-o>    =>      pthread_create
<
Where pthread_create is a global function.
eg2: >
    ::globa<C-x><C-o>       =>     ::global_func()
                                    +----------------+
                                    |global_func()  f|
                                    |global_var1    v|
                                    |global_var2    v|
                                    +----------------+
<
Where global_var1, global_var2 and global_func are global symbols
eg3: >
    ::<C-x><C-o>            =>      [NO MATCH]
<
No match because a global completion from an empty base is not allowed.


Member Completion~

You can complete members of a container(class, struct, namespace, enum).
VimLite Code Completion will auto popup complete menu when you type ':' or '.'
or '>'. Of cause you can use <C-x><C-o> to start completing.

eg: >
    MyNamespace::<C-x><C-o>
                +--------------------------------+
                |E_ENUM0            e MyNamespace|
                |E_ENUM1            e MyNamespace|
                |E_ENUM2            e MyNamespace|
                |MyClass            c MyNamespace|
                |MyEnum             g MyNamespace|
                |MyStruct           s MyNamespace|
                |MyUnion            u MyNamespace|
                |SubNamespace       n MyNamespace|
                |doSomething(       f MyNamespace|
                |myVar              v MyNamespace|
                |something_t        t MyNamespace|
                +--------------------------------+

------------------------------------------------------------------------------
5.1. OmniCpp                            *VimLite-CodeCompletion-OmniCpp*

OmniCpp needs a tags database to support completion, you need parse the
workspace before starting code completion. Put the cursor on workspace line
in VLWorkspace buffer window, popup the menu, select "Parse Workspace (Quick)".

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
5.1.1. Commands                         *VimLite-CodeCompletion-OmniCpp-Cmds*

    VLWParseFiles <file1> <file2> ...   Parse files.

    VLWParseCurrentFile                 Parse current editing file.
                                        NOTE: You ought to save current file
                                        before run this command.

    VLWDeepParseCurrentFile             Parse current editing file and the
                                        files it includes.
                                        NOTE: You ought to save current file
                                        before run this command.

    VLWEnvVarSetttings                  Open 'Environment Variables Setting'
                                        dialog.

    VLWTagsSetttings                    Open 'Tags Setting' dialog.

    VLWCompilersSettings                Open 'Compilers Settings' dialog.

    VLWBuildersSettings                 Open 'Builders Settings' dialog.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
5.1.2. Macros Handling                  *VimLite-CodeCompletion-OmniCpp-Macros*

List in 'VimLite -> TagsSettings -> Tokens' are to be pre-processed by OmniCpp
parser. Usually, you would like to add new token which confuse the parse.
Read the following url for help:
    http://www.codelite.org/LiteEditor/MacrosHandling101

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
5.1.3. Limitation                       *VimLite-CodeCompletion-OmniCpp-Limit*

OmniCpp is not a C/C++ compiler, so...
Some C++ features are not supported, some implemented features may not work
properly in some conditions. They are multiple reasons like a lack of
information in the database, performance issues and so on...

Here is a list for whiches are not supported:~
1. Does not support local variables completion, use <C-x><C-n> instead.
2. Does not support using [namespace] statement in included files. This
   behavior is not recommended.
3. Does not support friend. Solution is just displaying all class members.
4. Does not support complex typedef. Solution is configuring corresponding
   type replacement. eg: >
   typedef typename _Alloc::template rebind<value_type>::other _Pair_alloc_type;
5. Does not support overload functions with different return types.
6. Does not support function template.
7. Does not support '.' and '->' overload for performance considerations. 

------------------------------------------------------------------------------
5.1. Clang                              *VimLite-CodeCompletion-Clang*

You can set g:VLWorkspaceUseClangCC to 1 to enable clang code completion. >
    let g:VLWorkspaceUseClangCC = 1

Clang code completion will auto work, but need the current build configuration
of the project is not a custom build. VimLite need version of clang >= 2.9
to work.

On ubuntu 10.04, you can download the deb package here:
    http://code.google.com/p/vimlite/downloads/list

==============================================================================
6. Debugger                             *VimLite-Debugger*

VimLite integrate pyclewn in it.
Start to debug the active projcet, just press the icon in toolbar or run: >
    :VLWDbgStart
<
NOTE: You must start degger before setting a breakpoint.

------------------------------------------------------------------------------
6.1. Commands                           *VimLite-Debugger-Commands*

    VLWDbgStart                         Start debugger.

    VLWDbgStop                          Stop debugger.

    VLWDbgStepIn                        Step in.

    VLWDbgNext                          Next.

    VLWDbgStepOut                       Step out.

    VLWDbgContinue                      Continue

    VLWDbgToggleBp                      Toggle breakpoint of the cursor line.

Please run ':h pyclewn' for more commands.~

==============================================================================
7. Options                              *VimLite-Options*

Right hand side is the default value, you can modify other values for the same
type. If type of the right hand side value is integer, 0 for False, non-zero
for True. 

------------------------------------------------------------------------------
7.1. Project Manager Options            *VimLite-Options-ProjectManager*

Workspace window width. >
    let g:VLWorkspaceWinSize = 30

Set the wrokspace buffer name. >
    let g:VLWorkspaceBufName = '==VLWorkspace=='

Highlight the workspace buffer cursor line. >
    let g:VLWrokspaceHighlightCursorline = 1

If not 0, when the curser put on one source file buffer, the cursor of
worksapce buffer's cursor will go the the corresponding source file line. >
    let g:VLWorkspaceLinkToEidtor = 1

Will install a menu named 'VimLite'. >
    let g:VLWorkspaceEnableMenuBarMenu = 1

Will install some toolbar icons. >
    let g:VLWorkspaceEnableToolBarMenu = 1

Enable cscope, if this variable is 0, all about cscope features will be not
worked. >
    let g:VLWorkspaceEnableCscope = 1

If not 0, VimLite will not initiative to create cscope database, but only
connect an existing db. >
    let g:VLWorkspaceJustConnectExistCscopeDb = 1

If not 0, VimLite will pass all project's include search paths to cscope, so
cscope will generate a datebase which contains all headers. >
    let g:VLWorkspaceCscopeContainExternalHeader = 1

Enable fast symbol lookup via an inverted index. This option causes cscope to
create 2 more files ('<name>.in.out'' and '<name>.po.out') in addition to the
normal database. This allows a faster symbol search algorithm that provides
noticeably faster lookup performance for large projects. >
    let g:VLWorkspaceCreateCscopeInvertedIndex = 0

Highlight the .h/.hpp and .c/.cpp file. >
    let g:VLWorkspaceHighlightSourceFile = 1

Insert worksapce name into title. >
    let g:VLWorkspaceDispWspNameInTitle = 1

Auto save all modified files before build projects. >
    let g:VLWorkspaceSaveAllBeforeBuild = 0

Use Clang code completion instead of OmniCpp which based on modified ctags. >
    let g:VLWorkspaceUseClangCC = 0

The active project highlight group name. >
    let g:VLWorkspaceActiveProjectHlGroup = 'SpecialKey'

Auto parse the editing file when save it. 
Only work for files belong to workspace. >
    let g:VLWorkspaceParseFileAfterSave = 0

Do not auto parse the editing file if it is a source file (*.cpp, *.c). >
    let g:VLWorkspaceNotParseSourceAfterSave = 0

------------------------------------------------------------------------------
7.2. Calltips Options                   *VimLite-Options-Calltips*

The key to trigger function calltips. >
    let g:VLCalltips_DispCalltipsKey = '<A-p>'

The key to display the next calltips. >
    let g:VLCalltips_NextCalltipsKey = '<A-j>'

The key to display the prev calltips. >
    let g:VLCalltips_PrevCalltipsKey = '<A-k>'

Enable indicating which function argument is being edited. If you feel this
feature is slow, you may set it to 0. >
    let g:VLCalltips_IndicateArgument = 1

Enable syntax testing. As well known, syntax testing in vim is very slow, if
function calltips in your vim crash your speed, you may not set this to 1. >
    let g:VLCalltips_EnableSyntaxTest = 0

------------------------------------------------------------------------------
7.3. OmniCpp Options                    *VimLite-Options-OmniCpp*

Auto trigger code completion when input '.' (dot). >
    let g:VLOmniCpp_MayCompleteDot = 1

Auto trigger code completion when input '>' (right arrow). >
    let g:VLOmniCpp_MayCompleteArrow = 1

Auto trigger code completion when input ':' (colon). >
    let g:VLOmniCpp_MayCompleteColon = 1

When completeopt does not contain longest option, this setting controls the
behaviour of the popup menu selection.
  * 0 -> don't select first item.
  * 1 -> select first item (inserting it to the text).
  * 2 -> select first item (without inserting it to the text). >
    let g:VLOmniCpp_ItemSelectionMode = 2

Map <CR> (return) key to auto trigger function calltips after select a
function item in the code completion popup menu. >
    let g:VLOmniCpp_MapReturnToDispCalltips = 1

Use python code which can improve the completing speed. >
    let g:VLOmniCpp_UsePython = 1

Goto declaration of symbols key.
It does not need cscope and is more accurate.
NOTE: You should keep the ctags database up to date. >
    let g:VLOmniCpp_GotoDeclarationKey = '<C-p>'

Goto implementation of symbols key. It also jump to included file when locates
the cursor in '#include' line.
It does not need cscope and is more accurate.
NOTE: You should keep the ctags database up to date. >
    let g:VLOmniCpp_GotoImplementationKey = '<C-]>'

------------------------------------------------------------------------------
7.4. Clang Options                      *VimLite-Options-Clang*

Clang program. >
    let g:VLCCC_ClangProgram = 'clang'

Enable syntax check for C/C++ when trigger code completion. >
    let g:VLCCC_IndicateError = 1

Auto trigger code completion when input '.' (dot). >
    let g:VLCCC_MayCompleteDot = 1

Auto trigger code completion when input '>' (right arrow). >
    let g:VLCCC_MayCompleteArrow = 1

Auto trigger code completion when input ':' (colon). >
    let g:VLCCC_MayCompleteColon = 1

When completeopt does not contain longest option, this setting controls the
behaviour of the popup menu selection.
  * 0 -> don't select first item.
  * 1 -> select first item (inserting it to the text).
  * 2 -> select first item (without inserting it to the text). >
    let g:VLCCC_ItemSelectionMode = 2

Map <CR> (return) key to auto trigger function calltips after select a
function item in the code completion popup menu. >
    let g:VLCCC_MapReturnToDispCalltips = 1

------------------------------------------------------------------------------
7.5. Debugger Options                   *VimLite-Options-Debugger*

The frame sign background color, can be #xxxxxx format. >
    let g:VLWDbgFrameSignBackground = 'DarkMagenta'

Save breakpoints info in a file. Currently, this feature does not work well,
so you may want to disable this feature. >
    let g:VLWDbgSaveBreakpointsInfo = 1

==============================================================================
8. Tips                                 *VimLite-Tips*
------------------------------------------------------------------------------
8.1. Configuration Sample               *VimLite-ConfigSample*

Configuration sample of VimLite >
    let g:VLWorkspaceSaveAllBeforeBuild = 1
    let g:VLCCC_ItemSelectionMode = 10
    let g:VLWorkspaceParseFileAfterSave = 1
    let g:VLWorkspaceNotParseSourceAfterSave = 1
    let g:VLCalltips_IndicateArgument = 0
    let g:VLCalltips_EnableSyntaxTest = 0
    let g:VLWDbgSaveBreakpointsInfo = 0

------------------------------------------------------------------------------
8.2. Use cl.exe On Windows              *VimLite-Windows*

Run :VLWBuildersSettings to open settings dialog, change "Builder Command:"
to following (I have installed VS 2010 in D:\Program Files folder): >
    "D:\Program Files\Microsoft Visual Studio 10.0\Common7\Tools\vsvars32.bat" && make -j 2 -f

This is all.
NOTE: Currently, VimLite can not support code completion with headers of
      Visual Studio.
NOTE: Compiler the program with cl.exe, this imply that VimLite can not debug
      the program with gdb.

Using MinGW is highly recommended.

------------------------------------------------------------------------------
vim:tw=78:ft=help:norl:et:ts=4:sw=4:sts=4
